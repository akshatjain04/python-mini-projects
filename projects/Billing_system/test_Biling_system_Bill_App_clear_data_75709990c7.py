# Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Test when the user clicks on "Yes" to the Clear Data prompt.
   - Expected outcome: All the values related to sanitizer, mask, hand_gloves, dettol, newsprin, thermal_gun, rice, food_oil, wheat, daal, flour, maggi, sprite, limka, mazza, coke, fanta, mountain_duo, medical_price, grocery_price, cold_drinks_price, medical_tax, grocery_tax, cold_drinks_tax, c_name, c_phone, bill_no and search_bill should be set to 0 or "" (depending on type). A new random bill_no between 1000 and 9999 should be generated. 
   
2. Test the situation when user chooses "No" to the Clear Data prompt.
   - Expected outcome: All the values should remain the same and not be modified.

3. Test whether the the random bill_no generated is within the 1000 to 9999 range.
   - Expected outcome: The bill_no should always be within the specified range.

4. Check that the clear_data function does not change any uncovered attribute or parameter of the object.
   - Expected outcome: All attributes or parameters of the object outside of those specifically mentioned in the function remain the same.

5. Test when some or all of the object retuning values are not int or string.
   - Expected outcome: The function should be able to handle non-int and non-string values without errors.

6. Test that the 'welcome_bill()' function is called at the end of the process.
   - Expected outcome: The 'welcome_bill()' function should be triggered each time the clear_data function runs successfully.

7. Test the behavior of the function with concurrent calls.
   - Expected outcome: The function should be executed properly without any conflict when invoked concurrently. 

8. Check the scenario where some of the fields are already empty or zero.
   - Expected outcome: The function should run successfully and renew the bill_no while the other values remain unchanged. 

9. Check that the 'askyesno' dialog box appears when calling the clear_data function.
   - Expected outcome: The dialog box always appears when the clear_data function is invoked.
"""
import pytest
from unittest.mock import patch, MagicMock
from biling_system import Bill_App
from tkinter import messagebox


@patch('tkinter.messagebox')
def test_clear_data(mock_messagebox):
    
    """
    Test when the user clicks on "Yes" to the Clear Data prompt.
    """
    # Create an instance of the class.
    application = Bill_App()
    
    # Mock the response of the messagebox function to return 'Yes'.
    mock_messagebox.askyesno.return_value = True
    
    # Call the function with mocked messagebox
    application.clear_data()
    
    # Verify all the values are reset.
    assert application.sanitizer.get() == 0
    assert application.mask.get() == 0
    assert application.hand_gloves.get() == 0
    assert application.dettol.get() == 0
    assert application.newsprin.get() == 0
    assert application.thermal_gun.get() == 0
    assert application.rice.get() == 0
    assert application.food_oil.get() == 0
    assert application.wheat.get() == 0
    assert application.daal.get() == 0
    assert application.flour.get() == 0
    assert application.maggi.get() == 0
    assert application.sprite.get() == 0
    assert application.limka.get() == 0
    assert application.mazza.get() == 0
    assert application.coke.get() == 0
    assert application.fanta.get() == 0
    assert application.mountain_duo.get() == 0
    assert application.medical_price.get() == ""
    assert application.grocery_price.get() == ""
    assert application.cold_drinks_price.get() == ""
    assert application.medical_tax.get() == ""
    assert application.grocery_tax.get() == ""
    assert application.cold_drinks_tax.get() == ""
    assert application.c_name.get() == ""
    assert application.c_phone.get() == ""
    assert application.search_bill.get() == ""
    assert 1000 <= int(application.bill_no.get()) <= 9999

    
    """
    Test the situation when user chooses "No" to the Clear Data prompt.
    """
    # Create an instance of the class.
    application = Bill_App()
    
    # Set initial values.
    application.sanitizer.set(5)
    
    # Mock the messagebox to return 'No'.
    mock_messagebox.askyesno.return_value = False
    
    # Call the function.
    application.clear_data()
    
    # The values should remain the same.
    assert application.sanitizer.get() == 5

    """
    Test the behavior of the function with concurrent calls.
    """
    # Create an instance of the class.
    application = Bill_App()
    
    # Mock the messagebox to return 'Yes'.
    mock_messagebox.askyesno.return_value = True

    # Set initial values.
    application.sanitizer.set(5)

    # Call the function for the first time.
    application.clear_data()

    # Save the randomly generated bill_no
    previous_bill_no = application.bill_no.get()

    # Call the function for the second time.
    application.clear_data()

    # The previous bill_no and the current bill_no should not be same.
    assert application.bill_no.get() != previous_bill_no
