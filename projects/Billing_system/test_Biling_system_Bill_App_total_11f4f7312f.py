# Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Test if all variables `self.hand_gloves, self.sanitizer, self.mask, self.dettol, self.newsprin, self.thermal_gun, self.rice, self.food_oil, self.wheat, self.daal, self.flour, self.maggi, self.sprite, self.limka, self.mazza, self.coke, self.fanta, and self.mountain_duo` have valid number values before processing the `total` method to avoid errors during calculation.

2. Test if method correctly computes `self.m_h_g_p, self.m_s_p, self.m_m_p, self.m_d_p, self.m_n_p, self.m_t_g_p` according to formula in the method.

3. Check if `self.total_medical_price` is the sum of all prices related to medical items as expected.

4. Test if `self.medical_price` and `self.medical_tax` are set to correct calculated values, and correctly convert to the format of "Rs. "+str(value).

5. Test if method correctly computes `self.g_r_p, self.g_f_o_p, self.g_w_p, self.g_d_p, self.g_f_p, self.g_m_p` according to formula in the method.

6. Check if `self.total_grocery_price` is the sum of all prices related to grocery items as expected.

7. Test if `self.grocery_price` and `self.grocery_tax` are set to correct calculated values, and correctly convert to the format of "Rs. "+str(value).

8. Test if method correctly computes `self.c_d_s_p, self.c_d_l_p, self.c_d_m_p, self.c_d_c_p, self.c_d_f_p, self.c_m_d` according to formula in the method.

9. Check if `self.total_cold_drinks_price` is the sum of all prices related to cold drinks as expected.

10. Test if `self.cold_drinks_price` and `self.cold_drinks_tax` are set to correct calculated values, and correctly convert to the format of "Rs. "+str(value).

11. Test if `self.total_bill` is calculated correctly as sum of `self.total_medical_price, self.total_grocery_price, self.total_cold_drinks_price, self.c_tax, self.g_tax, and self.c_d_tax`.  

12. Test method with negative quantities and prices, the result should be logical/handle appropriately depending on the business case scenario.

13. Check the function's output when zero is given as input for all the products. The total bill, tax calculations and each individual totals should return zero in this case.

14. Null or empty inputs should be handled appropriately as per the application's specification by either providing meaningful error messages or handling them internally by setting them to zero or a default value.

"""
from biling_system import Bill_App
import pytest

def test_Bill_App_total():  
    #create object of the class Bill_App
    app = Bill_App()

    app.sanitizer.set(5)
    app.mask.set(3)
    app.hand_gloves.set(4)
    app.dettol.set(2)
    app.newsprin.set(6)
    app.thermal_gun.set(8)

    app.rice.set(10)
    app.food_oil.set(10)
    app.wheat.set(11)
    app.daal.set(15)
    app.flour.set(4)
    app.maggi.set(6)

    app.sprite.set(4)
    app.limka.set(3)
    app.mazza.set(7)
    app.coke.set(10)
    app.fanta.set(9)
    app.mountain_duo.set(5)

    app.total()  #call the function total
  
    assert app.medical_price.get() == 'Rs. 206.0'
    assert app.medical_tax.get() == 'Rs. 10.3'
    assert app.grocery_price.get() == 'Rs. 1080.0'
    assert app.grocery_tax.get() == 'Rs. 54.0'
    assert app.cold_drinks_price.get() == 'Rs. 380.0'
    assert app.cold_drinks_tax.get() == 'Rs. 38.0'
    assert app.total_bill == 1788.3 # it is product of all the totals and their taxes
    
    # Test for zero values
    app.sanitizer.set(0)
    app.mask.set(0)
    app.hand_gloves.set(0)
    app.dettol.set(0)
    app.newsprin.set(0)
    app.thermal_gun.set(0)
    app.rice.set(0)
    app.food_oil.set(0)
    app.wheat.set(0)
    app.daal.set(0)
    app.flour.set(0)
    app.maggi.set(0)
    app.sprite.set(0)
    app.limka.set(0)
    app.mazza.set(0)
    app.coke.set(0)
    app.fanta.set(0)
    app.mountain_duo.set(0)

    app.total()  #call the function total
    
    assert app.medical_price.get() == 'Rs. 0.0'
    assert app.medical_tax.get() == 'Rs. 0.0'
    assert app.grocery_price.get() == 'Rs. 0.0'
    assert app.grocery_tax.get() == 'Rs. 0.0'
    assert app.cold_drinks_price.get() == 'Rs. 0.0'
    assert app.cold_drinks_tax.get() == 'Rs. 0.0'
    assert app.total_bill.get() == 'Rs. 0.0' # it is product of all the totals and their taxes

    # TODO: Add more test scenarios for various inputs including negative and null inputs
