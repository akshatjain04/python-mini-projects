# ********RoostGPT********
"""
Test generated by RoostGPT for test python-1 using AI Type  and AI Model 

ROOST_METHOD_HASH=clear_data_039b9b5ff8
ROOST_METHOD_SIG_HASH=clear_data_75709990c7


```
Scenario 1: User confirms data clearing
Details:
  TestName: test_clear_data_with_user_confirmation
  Description: This test verifies if all the variables are reset to their default values after the user confirms the action to clear data.
Execution:
  Arrange: Initialize the application with its default state.
  Act: Simulate the user clicking 'Yes' in the confirmation dialog, then invoke the clear_data function.
  Assert: Check if all variables related to products, prices, taxes, and customer details are reset to their initial state.
Validation:
  Rationalizing the importance of this test ensures that when users decide to start a new transaction, they are presented with a clean slate, preventing data from previous transactions from affecting the new one.

Scenario 2: User cancels data clearing
Details:
  TestName: test_clear_data_with_user_cancellation
  Description: This test ensures that the data remains unchanged when the user cancels the clear data action.
Execution:
  Arrange: Initialize the application and modify several variables from their default values.
  Act: Simulate the user clicking 'No' in the confirmation dialog, then invoke the clear_data function.
  Assert: Verify that all previously modified variables retain their values.
Validation:
  This test is crucial to confirm that the application respects the user's decision to not clear data, ensuring that unintentional data loss does not occur.

Scenario 3: Automatic bill number regeneration upon data clearing
Details:
  TestName: test_bill_number_regeneration_on_clear
  Description: This test checks if a new bill number is generated and differs from the previous one when the data is cleared.
Execution:
  Arrange: Initialize the application and note the current bill number.
  Act: Confirm data clearing and invoke the clear_data function.
  Assert: Ensure that a new bill number is generated and that it is different from the old one.
Validation:
  The generation of a new bill number upon clearing data is vital for maintaining the uniqueness of each transaction, which is essential for record-keeping and auditing.

Scenario 4: Welcome bill message reset after clearing data
Details:
  TestName: test_welcome_message_reset_on_clear
  Description: This test ensures that the welcome bill area is reset and displays the appropriate default welcome message and new bill number after clearing data.
Execution:
  Arrange: Initialize the application, perform transactions, and modify the bill area.
  Act: Clear the data using the clear_data function after user confirmation.
  Assert: Verify that the bill area has been reset to show the default welcome message including the new bill number.
Validation:
  Resetting the welcome bill message is critical to ensure that every new transaction starts with the correct initial setup, providing clarity and a good user experience.

Scenario 5: Full reset of customer and transaction details
Details:
  TestName: test_full_reset_of_customer_and_transaction_details
  Description: Ensure that all customer-related inputs and transaction details are fully reset to their defaults.
Execution:
  Arrange: Modify customer details and transaction-related variables from their defaults.
  Act: Simulate user confirmation for clearing data and invoke the clear_data function.
  Assert: Check that all fields related to customer information and transaction details are reset to their default values.
Validation:
  This test confirms that the system is capable of completely isolating transactions from each other by resetting all relevant fields, thus safeguarding against accidental data carryover between transactions.
```
These scenarios ensure the robustness and reliability of the `clear_data` function, which is fundamental for transaction integrity and user trust in the application.
"""

# ********RoostGPT********
import pytest
from unittest.mock import patch
from tkinter import messagebox
from Billing_system.billing_system import Bill_App
import random

class TestBillAppClearData:
    @pytest.mark.positive
    @pytest.mark.smoke
    def test_clear_data_with_user_confirmation(self, mocker):
        # Arrange
        root = mocker.MagicMock()
        app = Bill_App(root)
        mocker.patch.object(messagebox, 'askyesno', return_value=True)
        initial_values = {
            "sanitizer": app.sanitizer.get(),
            "mask": app.mask.get(),
            "hand_gloves": app.hand_gloves.get(),
            "dettol": app.dettol.get(),
            "newsprin": app.newsprin.get(),
            "thermal_gun": app.thermal_gun.get(),
            "rice": app.rice.get(),
            "food_oil": app.food_oil.get(),
            "wheat": app.wheat.get(),
            "daal": app.daal.get(),
            "flour": app.flour.get(),
            "maggi": app.maggi.get(),
            "sprite": app.sprite.get(),
            "limka": app.limka.get(),
            "mazza": app.mazza.get(),
            "coke": app.coke.get(),
            "fanta": app.fanta.get(),
            "mountain_duo": app.mountain_duo.get(),
            "medical_price": app.medical_price.get(),
            "grocery_price": app.grocery_price.get(),
            "cold_drinks_price": app.cold_drinks_price.get(),
            "medical_tax": app.medical_tax.get(),
            "grocery_tax": app.grocery_tax.get(),
            "cold_drinks_tax": app.cold_drinks_tax.get(),
            "c_name": app.c_name.get(),
            "c_phone": app.c_phone.get(),
            "bill_no": app.bill_no.get(),
            "search_bill": app.search_bill.get()
        }

        # Act
        app.clear_data()

        # Assert
        for key, value in initial_values.items():
            if key == "bill_no":
                assert app.bill_no.get() != value  # Check for new bill number
            else:
                assert not app.__dict__[key].get()  # All others should be reset

    @pytest.mark.negative
    @pytest.mark.regression
    def test_clear_data_with_user_cancellation(self, mocker):
        # Arrange
        root = mocker.MagicMock()
        app = Bill_App(root)
        mocker.patch.object(messagebox, 'askyesno', return_value=False)
        initial_values = {
            "sanitizer": 5,
            "mask": 10,
            "hand_gloves": 15,
            "dettol": 20,
            "newsprin": 25,
            "thermal_gun": 30,
            "rice": 35,
            "food_oil": 40,
            "wheat": 45,
            "daal": 50,
            "flour": 55,
            "maggi": 60,
            "sprite": 65,
            "limka": 70,
            "mazza": 75,
            "coke": 80,
            "fanta": 85,
            "mountain_duo": 90,
            "medical_price": "100",
            "grocery_price": "150",
            "cold_drinks_price": "200",
            "medical_tax": "10",
            "grocery_tax": "15",
            "cold_drinks_tax": "20",
            "c_name": "John Doe",
            "c_phone": "1234567890",
            "bill_no": "9999",
            "search_bill": "8888"
        }
        for key, value in initial_values.items():
            app.__dict__[key].set(value)

        # Act
        app.clear_data()

        # Assert
        for key, value in initial_values.items():
            assert app.__dict__[key].get() == value  # Values should remain unchanged

    @pytest.mark.positive
    @pytest.mark.performance
    def test_bill_number_regeneration_on_clear(self, mocker):
        # Arrange
        root = mocker.MagicMock()
        app = Bill_App(root)
        mocker.patch.object(messagebox, 'askyesno', return_value=True)
        old_bill_number = app.bill_no.get()

        # Act
        app.clear_data()

        # Assert
        new_bill_number = app.bill_no.get()
        assert new_bill_number != old_bill_number

    @pytest.mark.positive
    def test_welcome_message_reset_on_clear(self, mocker):
        # Arrange
        root = mocker.MagicMock()
        app = Bill_App(root)
        mocker.patch.object(messagebox, 'askyesno', return_value=True)
        app.txtarea.insert('1.0', "Old Message")

        # Act
        app.clear_data()

        # Assert
        content = app.txtarea.get('1.0', 'end-1c')
        assert "Welcome Webcode Retail" in content
        assert "Bill Number:" in content

    @pytest.mark.positive
    def test_full_reset_of_customer_and_transaction_details(self, mocker):
        # Arrange
        root = mocker.MagicMock()
        app = Bill_App(root)
        mocker.patch.object(messagebox, 'askyesno', return_value=True)
        app.c_name.set("Alice")
        app.c_phone.set("9876543210")

        # Act
        app.clear_data()

        # Assert
        assert app.c_name.get() == ""
        assert app.c_phone.get() == ""
