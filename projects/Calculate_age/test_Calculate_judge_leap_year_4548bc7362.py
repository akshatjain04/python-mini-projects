# Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Test Scenario: User inputs a year that is divisible by 4
- Test Case: User inputs 2024 (which is divisible by 4)
- Expected Result: The function should return True, because according to the business rules, a year is considered a leap year if it is evenly divisible by 4.

2. Test Scenario: User inputs a year that is divisible by 100 but not by 400
- Test Case: User inputs 1900 (which is divisible by 100 but not by 400)
- Expected Result: The function should return False. Even though 1900 is divisible by 4, it is also divisible by 100 and not evenly divisible by 400, therefore, according to the leap year rules, it is not a leap year.

3. Test Scenario: User inputs a year that is divisible by 400
- Test Case: User inputs 2000 (which is divisible by 400)
- Expected Result: The function should return True. According to the leap year rules, a year is a leap year if it is evenly divisible by 400.

4. Test Scenario: User inputs a year that is not divisible by 4
- Test Case: User inputs 2021 (which is not divisible by 4)
- Expected Result: The function should return False. According to the leap year rules, a year is not a leap year if it is not evenly divisible by 4.

5. Test Scenario: User inputs the year 0
- Test Case: User inputs 0
- Expected Result: As per the Gregorian calendar, there is no year 0. Therefore the test would depend on how the function handles this case. The expected result should be False, but it could also raise an exception.

6. Test Scenario: User inputs a negative year
- Test Case: User inputs -400 (negative year)
- Expected Result: As there were no leap years before the introduction of the Gregorian calendar in 1582, the function should return False or could also raise an exception, depends on business requirement.
"""
import pytest
import calculate


def test_calculate_judge_leap_year_divisible_by_4():
    year = 2024
    result = calculate.judge_leap_year(year)
    assert result == True, f"For {year}, expected True but got {result}"


def test_calculate_judge_leap_year_divisible_by_100_but_not_400():
    year = 1900
    result = calculate.judge_leap_year(year)
    assert result == False, f"For {year}, expected False but got {result}"


def test_calculate_judge_leap_year_divisible_by_400():
    year = 2000
    result = calculate.judge_leap_year(year)
    assert result == True, f"For {year}, expected True but got {result}"


def test_calculate_judge_leap_year_not_divisible_by_4():
    year = 2021
    result = calculate.judge_leap_year(year)
    assert result == False, f"For {year}, expected False but got {result}"


def test_calculate_judge_leap_year_zero_year():
    year = 0
    with pytest.raises(ValueError):
        calculate.judge_leap_year(year)


def test_calculate_judge_leap_year_negative_year():
    year = -400
    with pytest.raises(ValueError):
        calculate.judge_leap_year(year)
