# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

import unittest
import os
import cv2
import glob
from unittest.mock import patch, Mock
from capture_video_frames import capture_frames


class TestCaptureFrames(unittest.TestCase):
    def setUp(self):
        self.file_path = 'sample_video.mp4'
        self.fc = capture_frames.FrameCapture(self.file_path)
        
        # remove existing frames from previous tests
        frames = glob.glob('frame*.jpg')
        for frame in frames:
            os.remove(frame)
            
    @patch('cv2.VideoCapture')
    def test_Capture_frames_a2af67d0a1(self, mock_cv2_VideoCapture):
        # mocking cv2.VideoCapture object and it's behaviour
        mock_obj = Mock()
        mock_cv2_VideoCapture.return_value = mock_obj
        mock_obj.read.side_effect = [(True, 'image'), (False, 'image')]

        self.fc.capture_frames()
        
        # Test if frames were properly written
        frames = glob.glob('frame*.jpg')
        self.assertEqual(len(frames), 1)
        
        # Test if cv2.imwrite was called with correct parameters 
        mock_cv2_VideoCapture().write.assert_called_with('frame0.jpg', 'image')
      
    @patch('cv2.VideoCapture')
    def test_Capture_frames_fail_a2af67d0a1(self, mock_cv2_VideoCapture):
        # mocking cv2.VideoCapture object and it's behaviour in case of failure
        mock_obj = Mock()
        mock_cv2_VideoCapture.return_value = mock_obj
        mock_obj.read.return_value = (False, 'image')

        self.fc.capture_frames()
        
        # Test if frames were not written in case of failure in reading frames
        frames = glob.glob('frame*.jpg')
        self.assertEqual(len(frames), 0)  # No frame files should be present

if __name__ == '__main__':
    unittest.main()
