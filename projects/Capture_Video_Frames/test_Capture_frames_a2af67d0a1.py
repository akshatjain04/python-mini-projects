# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

import os
import cv2
import sys
import pytest
import shutil
from unittest.mock import patch, Mock
from capture_video_frames import FrameCapture 

def test_Capture_frames_a2af67d0a1():
    # create a temporary directory
    os.makedirs('temp_dir')

    # Create a mock of VideoCapture
    mock_VideoCapture = Mock()
    # Mocking `read` method to return (True, 'mock_data') and then (False, None) for simulating frame end
    mock_VideoCapture.read.side_effect = [(True, 'mock_data'), (False, None)]
    # Mocking `imwrite` method to simulate successful write
    cv2.imwrite = Mock(return_value=True)

    with patch('cv2.VideoCapture', return_value=mock_VideoCapture):
        fc = FrameCapture('test.mp4')  
        fc.directory = './temp_dir'
        fc.capture_frames()
    
    assert mock_VideoCapture.read.call_count == 2, 'VideoCapture.read should be called twice'
    assert cv2.imwrite.call_count == 1, 'cv2.imwrite should be called once'
    assert cv2.imwrite.call_args[0][0] == './temp_dir/frame0.jpg', 'imwrite argument should match'
    assert cv2.imwrite.call_args[0][1] == 'mock_data', 'imwrite data should match'

    shutil.rmtree('temp_dir') # teardown temporary directory

if __name__ == '__main__':
    pytest.main([os.path.realpath(__file__)])
