# Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

"""
1. Scenario: Check if the generated password is fresh every time the function is called 
- Call the function twice and compare the two password outputs, they should not be equal

2. Scenario: Check if the generated password has a length of 28 characters
- Call the function and check if the length of the password returned is 28

3. Scenario: Check if the generated password includes at least one alphabet character
- Call the function and validate the output to see that it includes at least one character from string.ascii_letters

4. Scenario: Check if the password contains at least one numeric character
- Generate a password and validate that it includes at least one character from string.digits

5. Scenario: Check if the password contains at least one punctuation character
- Generate a password and verify that it includes at least one character from string.punctuation

6. Scenario: Check if the password field is clear before a new password is generated
- Fill the password field and then call the function, ensure that the field contains only the password which is just generated and none from before

7. Scenario: Check that the password is directly inserted into the password field
- Generate a password and verify if the password inside the password field matches exactly with the password returned by the function

8. Scenario: Check if the password is being generated from the given set of characters only
- Generate a password and validate each character to ensure it is from the given set i.e string.ascii_letters + string.punctuation + string.digits

9. Scenario: Validate that the password generated is random
- Call the function multiple times and verify that the generated password is not following any predictable pattern.
"""
import pytest
import string
from tkinter import*
from random import choice
from unittest.mock import MagicMock, patch
from password_generator import App


@pytest.fixture
def app():
    app = App()
    app.window = MagicMock()
    app.password_entry = MagicMock()
    return app

def test_fresh_password(app):
    first_password = app.generate_password()
    second_password = app.generate_password()
    assert first_password != second_password, 'Passwords are not unique'

def test_password_length(app):
    password = app.generate_password()
    assert len(password) == 28, 'Password length is not 28 characters long'

def test_alphabet_in_password(app):
    password = app.generate_password()
    assert any(char in string.ascii_letters for char in password), 'No alphabet characters in the password'

def test_numeric_in_password(app):
    password = app.generate_password()
    assert any(char in string.digits for char in password), 'No numeric characters in the password'

def test_punctuation_in_password(app):
    password = app.generate_password()
    assert any(char in string.punctuation for char in password), 'No punctuation characters in the password'

def test_password_field_is_clear(app):
    app.password_entry.get.return_value = "previouspassword"
    app.generate_password()
    assert app.password_entry.delete.called, 'Password field is not cleared before generating new password'
              
def test_password_inserted_in_field(app):
    password = app.generate_password()
    app.password_entry.insert.assert_called_once_with(0, password)

def test_password_from_given_set(app):
    check_set = string.ascii_letters + string.punctuation + string.digits
    password = app.generate_password()
    assert all(char in check_set for char in password), 'Password includes characters outside the given set'

def test_random_password(app):
    password_set = {app.generate_password() for _ in range(1000)}
    assert len(password_set) == 1000, 'Generated password is not random'
