# ********RoostGPT********
"""
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Provide a filename with mixed cases.
   Test Case: If the filename is "test_file_Test.py", the function should return "Test File Test".
   This scenario tests the ability of the function to capitalize the first letter of each word and replace underscores with spaces.

2. Scenario: Provide a filename without underscore characters.
   Test Case: If the filename is "testfile.py", the function should return "Testfile".
   This scenario tests the ability of the function to remove the file extension and capitalize the first letter of the string if no underscores were found.

3. Scenario: Provide a filename with numeric characters.
   Test Case: If the filename is "test_1_file.py", the function should return "Test 1 File".
   This scenario tests the ability of the function to handle numeric characters in the filename correctly.

4. Scenario: Provide a filename with special characters.
   Test Case: If the filename is "test#@!_file.py", the function should return "Test#@! File".
   This scenario tests the ability of the function to handle special characters in the filename correctly.

5. Scenario: Provide a filename with extra spaces. 
   Test Case: If the filename is "test__file.py", the function should return "Test  File".
   This scenario tests the ability of the function to handle extra spaces in the filename (represented by extra underscores).

6. Scenario: Provide an empty filename.
   Test Case: If the filename is "", the function should return "".
   This scenario tests the function's ability to handle empty strings.

7. Scenario: Provide a filename without the extension.
   Test Case: If the filename is "test_file", the function should return "Test_file".
   This scenario tests the function's ability to handle filenames without an extension.

8. Scenario: Provide a filename with a different extension.
   Test Case: If the filename is "test_file.txt", the function should return "Test File".
   This scenario tests the function's ability to handle different types of file extensions.

9. Scenario: Provide a filename with multiple periods and extensions.
   Test Case: If the filename is "test.file.test.py", the function should return "Test.file.test".
   This scenario tests the ability of the function to handle filenames with multiple periods and extensions.

10. Scenario: Provide a filename with multiple words separated by underscores.
    Test Case: If the filename is "this_is_a_test_file.py", the function should return "This Is A Test File".
    This scenario tests the ability of the function to handle multiple words separated by underscore characters.
"""

# ********RoostGPT********
import pytest
import alarm

def test_clean_filename_mixed_cases():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test_file_Test.py")
    assert result == "Test File Test", f'Expected "Test File Test", but got "{result}"'

def test_clean_filename_without_underscore():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("testfile.py")
    assert result == "Testfile", f'Expected "Testfile", but got "{result}"'

def test_clean_filename_numeric_characters():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test_1_file.py")
    assert result == "Test 1 File", f'Expected "Test 1 File", but got "{result}"'

def test_clean_filename_special_characters():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test#@!_file.py")
    assert result == "Test#@! File", f'Expected "Test#@! File", but got "{result}"'

def test_clean_filename_extra_spaces():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test__file.py")
    assert result == "Test  File", f'Expected "Test  File", but got "{result}"'

def test_clean_filename_empty_filename():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("")
    assert result == "", f'Expected "", but got "{result}"'

def test_clean_filename_without_extension():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test_file")
    assert result == "Test_file", f'Expected "Test_file", but got "{result}"'

def test_clean_filename_different_extension():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test_file.txt")
    assert result == "Test File", f'Expected "Test File", but got "{result}"'

def test_clean_filename_multiple_periods_extensions():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("test.file.test.py")
    assert result == "Test.file.test", f'Expected "Test.file.test", but got "{result}"'

def test_clean_filename_multiple_words_separated_by_underscores():
    # TODO: Replace the first argument to alarm.clean_filename() with your own test case.
    result = alarm.clean_filename("this_is_a_test_file.py")
    assert result == "This Is A Test File", f'Expected "This Is A Test File", but got "{result}"'
