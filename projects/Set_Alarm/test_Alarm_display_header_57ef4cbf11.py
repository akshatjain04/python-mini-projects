# ********RoostGPT********
"""
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Check that the function display_header correctly prints the given header.
   - Given a header string as input
   - Call the function display_header with the given header
   - Validate that the header is correctly printed between the two hash formatted lines

2. Scenario: Check that the function display_header handles empty string as input.
   - Given an empty string as a header
   - Call the function display_header with the empty string
   - Validate that the hash formatted lines are printed with empty space in between

3. Scenario: Check that the function display_header handles longer string input.
   - Given a header that is a string longer than the terminal size
   - Call the function display_header with the longer string
   - Validate that the function correctly adjusts and centres the strings

4. Scenario: Check that the function display_header handles special characters in the string.
   - Given a header containing special characters
   - Call the function display_header with the special characters string
   - Validate that the function correctly prints the special characters and does not produce any error

5. Scenario: Check that the function display_header behaves correctly when called multiple times.
   - Given multiple headers
   - Call the function display_header with each header one after the other
   - Validate that the function correctly prints and centers each header

6. Scenario: Check that the function display_header behaves correctly with white spaces in the header.
   - Given a header string that contains white spaces only
   - Call the function display_header with the input header
   - Validate that the function correctly centers and prints the white spaces

7. Scenario: Check that the function display_header handles None as input.
   - Given a header that is None 
   - Call the function display_header with None
   - Validate that the function does not throw any exceptions and behaves as expected
"""

# ********RoostGPT********
import pytest
from alarm import display_header
from unittest.mock import patch

def test_display_given_header():
    header = 'Alarm Program'
    with patch('builtins.print') as mocked_print:
        display_header(header)
        mocked_print.assert_any_match(f"###### {header} ######".center(os.get_terminal_size().columns))

def test_display_empty_string():
    header = ''
    with patch('builtins.print') as mocked_print:
        display_header(header)
        mocked_print.assert_any_match("######  ######".center(os.get_terminal_size().columns))

def test_display_long_string():
    header = 'A'*100
    with patch('builtins.print') as mocked_print:
        display_header(header)
        mocked_print.assert_any_match(f"###### {header[:os.get_terminal_size().columns-12]} ######")

def test_display_special_characters():
    header = '!@#$%^&*('
    with patch('builtins.print') as mocked_print:
        display_header(header)
        mocked_print.assert_any_call(f"###### {header} ######".center(os.get_terminal_size().columns))

def test_display_header_multiple_times():
    headers = ['Alarm Program', 'Wake Up', 'Reminder']
    with patch('builtins.print') as mocked_print:
        for header in headers:
            display_header(header)
            mocked_print.assert_any_call(f"###### {header} ######".center(os.get_terminal_size().columns))

def test_display_white_space_header():
    header = ' '*10
    with patch('builtins.print') as mocked_print:
        display_header(header)
        mocked_print.assert_any_call(f"###### {header} ######".center(os.get_terminal_size().columns))

def test_display_none_header():
    header = None
    with patch('builtins.print') as mocked_print:
        display_header(header)
        mocked_print.assert_any_call("###### None ######".center(os.get_terminal_size().columns))
