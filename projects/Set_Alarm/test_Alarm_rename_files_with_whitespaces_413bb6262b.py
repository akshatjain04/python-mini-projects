# ********RoostGPT********
"""
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: No files in the directory (Empty files list)
    - Given I call the function rename_files_with_whitespaces with a valid directory and an empty files list, And the extra_path is empty or valid
    - Then the function should not throw any exceptions and should simply return without renaming anything.

2. Scenario: Files list contains a file without any whitespace in its name
    - Given I call the function rename_files_with_whitespaces with a valid directory and the files list contains a file "abc.txt" without any whitespace in its name
    - Then the filename of the file should remain unchanged after the function call

3. Scenario: Files list contains a file with whitespace in its name
    - Given I call the function rename_files_with_whitespaces with a valid directory and the files list contains a file "abc def.txt" with whitespace in its name
    - Then the filename of the file should be changed to "abc_def.txt" after the function call

4. Scenario: Files list contains multiple files with and without whitespaces
    - Given I call the function rename_files_with_whitespaces with a valid directory and the files list contains multiple files with and without whitespaces in their names
    - Then the filenames of the files with whitespaces should be changed (whitespaces replaced with underscores) and the files without whitespaces should remain unchanged after the function call

5. Scenario: Providing a valid extra path
    - Given I call the function rename_files_with_whitespaces with a valid directory and the files list contains a file "abc def.txt" with whitespace in its name, And a valid extra_path is provided
    - Then the filename of the file located at the specified extra_path should be changed to "abc_def.txt" after the function call

6. Scenario: Providing an invalid extra path
    - Given I call the function rename_files_with_whitespaces with a valid directory and the files list contains a file "abc def.txt" with whitespace in its name, And an invalid extra_path is provided
    - Then the function should catch the exception and handled appropriately.

7. Scenario: Providing a valid current directory
    - Given I call the function rename_files_with_whitespaces with a valid directory and the files list contains a file "abc def.txt" with whitespace in its name
    - Then the filename of the file located at the specified directory should be changed to "abc_def.txt" after the function call

8. Scenario: Providing an invalid current directory
    - Given I call the function rename_files_with_whitespaces with an invalid directory and the files list contains a file "abc def.txt" with whitespace in its name
    - Then the function should catch the exception and handled appropriately.
"""

# ********RoostGPT********
import os
import pytest
import alarm

def test_rename_files_with_whitespaces_no_files():
    # Create a temporary directory for testing
    temp_dir = "/tmp/renametest"
    os.makedirs(temp_dir, exist_ok=True)
    alarm.rename_files_with_whitespaces(temp_dir, [])
    os.rmdir(temp_dir)  # Cleanup

def test_rename_files_with_no_whitespaces():
    filename = "abc.txt"
    temp_dir = "/tmp/renametest"
    os.makedirs(temp_dir, exist_ok=True)

    # create file in temp directory
    open(os.path.join(temp_dir, filename), 'a').close()

    alarm.rename_files_with_whitespaces(temp_dir, [filename])
    
    assert os.path.exists(os.path.join(temp_dir, filename))

    # Cleanup
    os.remove(os.path.join(temp_dir, filename))  
    os.rmdir(temp_dir)

def test_rename_files_with_whitespaces():
    filename = "abc def.txt"
    temp_dir = "/tmp/renametest"
    os.makedirs(temp_dir, exist_ok=True)

    # create file in temp directory
    open(os.path.join(temp_dir, filename), 'a').close()

    alarm.rename_files_with_whitespaces(temp_dir, [filename])
    
    assert not os.path.exists(os.path.join(temp_dir, filename))
    assert os.path.exists(os.path.join(temp_dir, filename.replace(" ", "_")))

    # Cleanup
    os.remove(os.path.join(temp_dir, filename.replace(" ", "_")))  
    os.rmdir(temp_dir)

def test_rename_files_multiple_files():
    filenames = ["abc def.txt", "xyz.txt"]
    temp_dir = "/tmp/renametest"
    os.makedirs(temp_dir, exist_ok=True)

    # create file in temp directory
    for filename in filenames:
        open(os.path.join(temp_dir, filename), 'a').close()

    alarm.rename_files_with_whitespaces(temp_dir, filenames)
    
    assert not os.path.exists(os.path.join(temp_dir, filenames[0]))
    assert os.path.exists(os.path.join(temp_dir, filenames[1]))
    assert os.path.exists(os.path.join(temp_dir, filenames[0].replace(" ", "_")))

    # Cleanup
    os.remove(os.path.join(temp_dir, filenames[0].replace(" ", "_"))) 
    os.remove(os.path.join(temp_dir, filenames[1]))  
    os.rmdir(temp_dir)

def test_rename_files_with_valid_extra_path():
    filename = "abc def.txt"
    temp_dir = "/tmp/renametest"
    extra_path = "extra_directory"
    os.makedirs(os.path.join(temp_dir, extra_path), exist_ok=True)

    # create file in temp directory
    open(os.path.join(temp_dir, extra_path, filename), 'a').close()

    alarm.rename_files_with_whitespaces(temp_dir, [filename], extra_path)
    
    assert not os.path.exists(os.path.join(temp_dir, extra_path, filename))
    assert os.path.exists(os.path.join(temp_dir, extra_path, filename.replace(" ", "_")))

    # Cleanup
    os.remove(os.path.join(temp_dir, extra_path, filename.replace(" ", "_"))) 
    os.rmdir(os.path.join(temp_dir, extra_path)) 
    os.rmdir(temp_dir)

def test_rename_files_with_invalid_extra_path():
    filename = "abc def.txt"
    temp_dir = "/tmp/renametest"
    extra_path = "/invalid/directory"
    os.makedirs(temp_dir, exist_ok=True)

    # create file in temp directory
    open(os.path.join(temp_dir, filename), 'a').close()

    with pytest.raises(FileNotFoundError):
        alarm.rename_files_with_whitespaces(temp_dir, [filename], extra_path)

    # Cleanup
    os.remove(os.path.join(temp_dir, filename))  
    os.rmdir(temp_dir)

def test_rename_files_with_valid_directory():
    filename = "abc def.txt"
    temp_dir = "/tmp/renametest"
    os.makedirs(temp_dir, exist_ok=True)

    # create file in temp directory
    open(os.path.join(temp_dir, filename), 'a').close()

    alarm.rename_files_with_whitespaces(temp_dir, [filename])
    
    assert not os.path.exists(os.path.join(temp_dir, filename))
    assert os.path.exists(os.path.join(temp_dir, filename.replace(" ", "_")))

    # Cleanup
    os.remove(os.path.join(temp_dir, filename.replace(" ", "_"))) 
    os.rmdir(temp_dir)

def test_rename_files_with_invalid_directory():
    filename = "abc def.txt"
    temp_dir = "/invalid/directory"

    with pytest.raises(FileNotFoundError):
        alarm.rename_files_with_whitespaces(temp_dir, [filename])
