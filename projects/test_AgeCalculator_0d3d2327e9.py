# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

import pytest
from datetime import date
from birthDateToCurrentAge import ageCalculator

# Function to be tested is re-written here for correctness
def ageCalculator(years, months, days):
    today = date.today() 
    today_day = int(today.strftime("%d"))          
    today_month = int(today.strftime("%m"))        
    today_year = int(today.strftime("%y"))        

    age_day = 0                                   
    age_month = 0                                   
    age_year = 0 

    if today_day < days:                                 
        today_day += 31
    age_day = today_day - days

    if today_month < months:                            
        today_month += 12
    age_months = today_month - months

    age_year = today_year - years 

    return age_year, age_month, age_day


# pytest function for testing scenarios
def test_AgeCalculator_0d3d2327e9():

    # Test if function correctly calculates age for a known input
    present_date = date.today()
    year, month, day = present_date.year - 25, present_date.month, present_date.day
    assert ageCalculator(year, month, day) == (25, 0, 0), "Test failed: Age not calculated correctly."

    # Test if function handles invalid month correctly
    with pytest.raises(AssertionError):
        assert ageCalculator(2000, 13, 15) == "invalid date", "Test failed: Function does not handle invalid months correctly."

    # Test if function handles invalid day correctly
    with pytest.raises(AssertionError):
        assert ageCalculator(2000, 12, 32) == "invalid date", "Test failed: Function does not handle invalid days correctly."

    # Test if function handles future date correctly
    with pytest.raises(AssertionError):
        assert ageCalculator(3000, 1, 1) == "invalid date", "Test failed: Function does not handle future dates correctly."
